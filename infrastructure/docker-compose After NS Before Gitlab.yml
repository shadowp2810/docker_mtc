version: "3.9"
services:
  api: 
    container_name: dev1
    build: ./dev1/
    networks:
      - backend
    volumes: 
      - type: volume
        source: dev1-vol
        target: /app 
  nodered:
    container_name: nodered
    build: ./nodered/
    networks:
      - backend
    ports:
      - "1880:1880"
    volumes:
      - type: volume
        source: nodered-vol
        target: /data
    environment:
      - INFLUXDB_TOKEN=pranavp2810token
  influxdb:
    container_name: influxdb
    build: ./influxdb/
    networks:
      - backend
    volumes:
      - type: volume
        source: influxdb-vol
        target: /var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=pranavp2810
      - DOCKER_INFLUXDB_INIT_PASSWORD=12345
      - DOCKER_INFLUXDB_INIT_ORG=ppp
      - DOCKER_INFLUXDB_INIT_BUCKET=pppbucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=pranavp2810token
  grafana: 
    container_name: grafana
    build: ./grafana/
    networks:
      - frontend
      - backend
      - db
    ports: 
      - "3000:3000"
    volumes: 
      - type: volume
        source: grafana-vol
        target: /var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=pranavp2810
      - GF_SECURITY_ADMIN_PASSWORD=12345
      - INFLUXDB_TOKEN=pranavp2810token
      - POSTGRES_USER=pranavp2810
      - POSTGRES_DB=pppdb
      - POSTGRES_PASSWORD=12345
  postgres:
    container_name: postgres
    build: ./postgres/
    networks:
      - db
    volumes:
      - type: volume
        source: postgres-vol
        target: /var/lib/postgres/data
    environment: 
      - POSTGRES_USER=pranavp2810
      - POSTGRES_PASSWORD=12345
      - POSTGRES_DB=pppdb
  postgrest:
    container_name: postgrest
    image: postgrest/postgrest
    networks:
      - backend
      - db
    environment: 
      - PGRST_DB_URI=postgres://pranavp2810:12345@postgres:5432/pppdb
      - PGRST_DB_ANON_ROLE=pranavp2810
volumes:
  dev1-vol: {}
  nodered-vol: {}
  influxdb-vol: {}
  grafana-vol: {}
  postgres-vol: {}
networks:
  frontend: {}
  backend: {}
  db: {}